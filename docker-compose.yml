version: '3.8'

x-n8n: &n8n-common
  image: n8nio/n8n:latest
  environment:
    N8N_PORT: 5678
    N8N_PROTOCOL: http
    N8N_HOST: localhost
    N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
    NODE_ENV: production
    WEBHOOK_URL: http://localhost:5678/
    
    DB_TYPE: postgresdb
    DB_POSTGRESDB_HOST: postgres
    DB_POSTGRESDB_PORT: 5432
    DB_POSTGRESDB_DATABASE: n8n
    DB_POSTGRESDB_USER: n8n
    DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
    
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${AWS_REGION}
    
    SLACK_OAUTH_TOKEN: ${SLACK_OAUTH_TOKEN}
    SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}

services:
  n8n:
    <<: *n8n-common
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        - condition: service_healthy
      qdrant:
        - condition: service_healthy
      workflow-importer:
        - condition: service_completed_successfully

  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: n8n
      POSTGRES_NON_ROOT_USER: n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT_ALLOW_RECOVERY_MODE: "true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  workflow-importer:
    <<: *n8n-common
    command: >
      sh -c "
        echo 'Waiting for n8n to be ready...' &&
        sleep 10 &&
        echo 'Importing workflows credentials...' &&
        n8n import:credentials --separated --input=/backup/credentials &&
        echo 'Importing workflows from backup...' &&
        n8n import:workflow --separated --input=/backup/workflows.json &&
        echo 'Workflow import completed!'
      "
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      - postgres
    restart: "no"  # Run once and exit

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  pgadmin_data:
    driver: local